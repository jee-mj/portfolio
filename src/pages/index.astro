---
import Layout from "../layouts/Layout.astro";
import About from "../components/about.astro";
import SQL from "../components/sql.astro";
import PHP from "../components/php.astro";
import Portfolio from "../components/portfolio.astro";
import Csharp from "../components/csharp.astro";
import Signature from "../components/signature.astro";
import Work from "../components/work.astro";
import Education from "../components/education.astro";
---

<Layout title="My Portfolio">
  <Portfolio />
  <Education />
  <Work />
  <About />
  <Csharp />
  <PHP />
  <SQL />
  <Signature />
  <main class="w-full h-full flex flex-row" id="main">
    <div class="w-full h-full flex flex-col p-4 pr-0 z-20" id="left">
      <div id="topLeft" class="w-full h-full flex flex-col items-center">
        <a
          tabindex="0"
          style="font-size: clamp(2em, 5vw, 4em); padding-left: clamp(0.5em,10vw,60em);"
          class="font-smooch border border-solid hover:transition-all hover:shadow-sm
            hover:bg-secondary-transparent hover:border-[#ffcd00] hover:shadow-white active:text-white transition-all duration-400 hover:duration-500
            text-[#ffcd00] border-secondary-transparent
            w-full h-full content-center
            grid z-50"
          id="portfolio-link">Portfolio</a
        >
        <a
          tabindex="1"
          style="font-size: clamp(2em, 5vw, 4em); padding-left: clamp(0.5em,10vw,60em);"
          class="font-smooch border border-solid hover:transition-all hover:shadow-sm
            hover:bg-secondary-transparent hover:border-[#ffcd00] hover:shadow-white active:text-white transition-all duration-400 hover:duration-500
            text-[#ffcd00] border-secondary-transparent
            w-full h-full content-center
            grid z-50"
          id="work-link">Work</a
        >
      </div>
      <div id="bottomLeft" class="w-full h-full flex flex-row items-center">
        <a
          tabindex="2"
          style="font-size: clamp(2em, 5vw, 4em); gap: clamp(1em, 20vh,10em);"
          class="font-smooch border border-solid hover:transition-all hover:shadow-sm
            hover:bg-secondary-transparent hover:border-[#ffcd00] hover:shadow-white active:text-white transition-all duration-400 hover:duration-500
            text-[#ffcd00] border-secondary-transparent
            w-full h-full content-center justify-center
            grid z-50"
          id="php-link">PHP<br /><span>2023</span></a
        >
        <a
          tabindex="3"
          style="font-size: clamp(2em, 5vw, 4em); gap: clamp(1em, 20vh,10em);"
          class="font-smooch border border-solid hover:transition-all hover:shadow-sm
            hover:bg-secondary-transparent hover:border-[#ffcd00] hover:shadow-white active:text-white transition-all duration-400 hover:duration-500
            text-[#ffcd00] border-secondary-transparent
            w-full h-full content-center justify-center
            grid z-50"
          id="csharp-link">C#<br /><span>2022</span></a
        >
      </div>
    </div>
    <div class="w-full h-full flex flex-col p-4 pl-0 z-20" id="right">
      <div id="topRight" class="w-full h-full flex flex-row items-center">
        <a
          tabindex="4"
          style="font-size: clamp(2em, 5vw, 4em);"
          class="font-smooch border border-solid hover:transition-all hover:shadow-sm
            hover:bg-secondary-transparent hover:border-[#ffcd00] hover:shadow-white active:text-white transition-all duration-400 hover:duration-500
            text-[#ffcd00] border-secondary-transparent
            w-full h-full content-center justify-center
            grid leading-none"
          id="about-link">About</a
        >
        <a
          tabindex="5"
          style="font-size: clamp(2em, 5vw, 4em); gap: clamp(1em, 20vh,10em);"
          class="font-smooch border border-solid hover:transition-all hover:shadow-sm
            hover:bg-secondary-transparent hover:border-[#ffcd00] hover:shadow-white active:text-white transition-all duration-400 hover:duration-500
            text-[#ffcd00] border-secondary-transparent
            w-full h-full content-center justify-center
            grid z-50"
          id="sql-link">SQL<br /><span>2023</span></a
        >
      </div>
      <div id="bottomRight" class="w-full h-full flex flex-col items-center">
        <a
          tabindex="6"
          style="font-size: clamp(2em, 5vw, 4em); padding-left: clamp(0.5em,10vw,60em);"
          class="font-smooch border border-solid hover:transition-all hover:shadow-sm
            hover:bg-secondary-transparent hover:border-[#ffcd00] hover:shadow-white active:text-white transition-all duration-400 hover:duration-500
            text-[#ffcd00] border-secondary-transparent
            w-full h-full content-center
            grid z-50"
          id="education-link">Study</a
        >
        <a
          tabindex="7"
          style="font-size: clamp(2em, 5vw, 4em); padding-right: clamp(0.5em,10vw,60em);"
          class="font-smooch border border-solid hover:transition-all hover:shadow-sm
            hover:bg-secondary-transparent hover:border-[#ffcd00] hover:shadow-white
            text-[#ffcd00] border-secondary-transparent
            w-full h-full content-center justify-end
            grid z-50"
          id="signature-link"
        >
          <span>jee-mj</span></a
        >
      </div>
    </div>
  </main>

  <style>
    html,
    body {
      padding: 0;
      margin: 0;
      overflow: hidden;
      width: 100%;
      height: 100%;
    }
  </style>
  <script>
    const linkElements = document.querySelectorAll('[id$="-link"]');

    const lowFidelity = document.getElementById(
      "popup-checkbox"
    ) as HTMLInputElement;

    const createCustomEvent = (eventName: string, detail: any) => {
      return new CustomEvent(eventName, { detail });
    };

    const toggleComponentVisibility = (event: Event) => {
      const clickedLink = event.target as HTMLElement;
      const componentId = clickedLink.id.replace("-link", "");
      const sectionToToggle = document.getElementById(componentId);

      if (!sectionToToggle) {
        console.error(`No section found for ID: ${componentId}`);
        return;
      }

      const toggleClasses = () => {
        sectionToToggle.classList.toggle("hidden");
        sectionToToggle.classList.toggle("flex");
        const mainElement = document.getElementById("main");
        mainElement!.classList.toggle("hidden");
        mainElement!.classList.toggle("flex");
      };
      const toggleBackground = () => {
        document.querySelectorAll(".bg-none, .bg-tertiary").forEach((e) => {
          e.classList.toggle("bg-none");
          e.classList.toggle("bg-tertiary");
        });
      };
      const toggleOpacity = () => {
        document.querySelectorAll(".section-content").forEach((e) => {
          e.classList.toggle("opacity-0");
          e.classList.toggle("opacity-100");
        });
      };
      const toggleMaxWidth = () => {
        const contentElement = document.getElementById(
          componentId + "-content"
        );
        contentElement && contentElement.classList.toggle("max-w-5xl");
      };

      if (sectionToToggle.classList.contains("hidden")) {
        const sectionLoadEvent = createCustomEvent("sectionLoadEvent", {
          componentId,
        });
        document.dispatchEvent(sectionLoadEvent);
        if (document.querySelector(".transition-none")) {
          setTimeout(toggleClasses, 0);
          setTimeout(toggleOpacity, 0);
          setTimeout(toggleBackground, 0);
          setTimeout(toggleMaxWidth, 0);
        } else if (document.querySelector(".transition-all")) {
          setTimeout(toggleClasses, 400);
          setTimeout(toggleOpacity, 450);
          setTimeout(toggleBackground, 500);
          setTimeout(toggleMaxWidth, 1150);
        }
      } else {
        const sectionUnloadEvent = createCustomEvent("sectionUnloadEvent", {
          componentId,
        });
        document.dispatchEvent(sectionUnloadEvent);
        if (document.querySelector(".transition-none")) {
          setTimeout(toggleOpacity, 0);
          setTimeout(toggleMaxWidth, 0);
          setTimeout(toggleBackground, 0);
          setTimeout(toggleClasses, 0);
        } else if (document.querySelector(".transition-all")) {
          setTimeout(toggleOpacity, 50);
          setTimeout(toggleMaxWidth, 100);
          setTimeout(toggleBackground, 500);
          setTimeout(toggleClasses, 700);
        }
      }
    };

    linkElements.forEach((linkElement) => {
      linkElement.addEventListener("click", toggleComponentVisibility, {
        passive: true,
      });
    });
  </script>
</Layout>
